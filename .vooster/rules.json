{
  "rules": [
    {
      "type": "prd",
      "content": "# PRD – AI 개인 맞춤 학습 플랫폼 (코드명: LearnHub)\n\n## 1. 개요\nAI가 자동 생성한 커리큘럼을 강의실 형태로 제공하고, 학습 진도율 시각화·버전 관리·커뮤니티 리뷰를 통해 ‘교육계의 GitHub’를 실현한다.\n\n## 2. 문제 정의\n• 정보 과부하: 수많은 온라인 자료로 학습 경로를 정하기 어렵다.\n• 학습 관리 부재: 진행 상황을 체계적으로 기록·시각화하기 힘들다.\n• 비용 부담: 유료 강의 의존도가 높아 학습 비용이 커진다.\n\n## 3. 제품 목표\n1. 사용자가 명확한 학습 로드맵을 5분 내 생성하도록 한다.\n2. DAU 300 / 30일 유지율 30 % (베타 3개월 차).\n3. 커리큘럼 완주율 7 % 이상, 리뷰 평균 4.0/5 유지.\n\n## 4. 타겟 사용자\n• 링크드인 활동 대학생·취준생 (주 타깃)\n• 트위터·블로그 기반 자기주도 학습자\n• 재직 중 기술 스택 확장 개발자·디자이너\n\n## 5. 핵심 기능 (MVP)\n1. AI 커리큘럼 자동 생성(5개 기술 도메인)\n2. 강의실/테이블 렌더링 + 진도율 표시\n3. 학습 기록 시각화(잔디 그래프)\n4. 커리큘럼 포크·편집 기능\n5. 커뮤니티 리뷰·평가 시스템(β)\n\n## 6. 추가 기능 (MVP+)\nA. 학습 리마인더 알림 (Email/푸시)\nB. AI 기반 신규 학습자료 추천\nC. 목표 설정 & 진행률 대시보드\n\n## 7. 사용자 스토리(주요 시나리오)\n• 취준생 지훈은 ‘Next.js 프론트엔드 취업’ 목표를 입력 → 3개월 로드맵 생성 → 강의실 UI로 캘린더·진도율 확인 → 학습 기록을 잔디 그래프로 확인 → 완주 후 링크드인에 포트폴리오 URL 공유.\n\n## 8. 주요 지표\n• 트래픽: DAU, MAU\n• 행동: 커리큘럼 생성 수, 완주 수, 포크 수\n• 참여: 리뷰 작성률, 리마인더 클릭률\n• 수익: 프리미엄 전환율, 월 구독 매출\n\n## 9. MVP 범위 & 일정\n| 기간 | 마일스톤 |\n|------|-----------|\n| 0-2주 | 요구사항 확정, UX 와이어프레임 |\n| 3-5주 | AI 엔진 PoC, DB 설계 |\n| 6-8주 | 프론트엔드 강의실 UI, 진도율 모듈 |\n| 9-10주| 잔디 그래프, 포크 기능, 리뷰 β |\n| 11-12주| 통합 QA, 베타 출시 |\n\n## 10. 성공 기준\n• 2주 내 커리큘럼 생성 500건 달성\n• 베타 종료 시점 평균 리뷰 4.0↑\n• 출시 12개월 내 월 매출 1,500만 원(BEP)\n\n## 11. 리스크 & 대응\n| 리스크 | 대응 |\n|---------|------|\n| AI 콘텐츠 품질 불균일 | GPT-4 검증 + 커뮤니티 평점 3.5↓ 숨김 |\n| 초기 사용자 확보 실패 | 링크드인 챌린지 + 대학 동아리 제휴 |\n| 기술 스케일 문제 | Supabase + Edge Function → 사용자 2만↑ 시 마이크로서비스 전환 |\n\n## 12. 향후 로드맵(12M+)\n• 포트폴리오 자동 생성 고도화(LinkedIn Sync)\n• Creator Marketplace(커리큘럼 판매)\n• 팀 학습/엔터프라이즈 기능",
      "writedAt": "2025-09-12T18:55:38.692Z"
    },
    {
      "type": "architecture",
      "content": "Of course. As a senior technical architect, my focus is on creating a practical, lean, and actionable plan that empowers the development team to build the right product quickly.\n\nHere is the refined Technical Requirements Document (TRD) for LearnHub. It eliminates premature optimization and overly prescriptive details, focusing strictly on what's needed to deliver the MVP.\n\n---\n\n# **Technical Requirements Document (TRD) - LearnHub (MVP)**\n\n## 1. System Overview & Core Principles\n\n### 1.1. Architecture Goal\nTo build a server-rendered web application using Next.js on Vercel, with Supabase serving as an all-in-one Backend as a Service (BaaS). This stack is chosen for maximum development velocity and minimum operational overhead for the MVP phase.\n\n### 1.2. Guiding Principles\n*   **MVP First, Simplicity Over Complexity:** We will only build what is required by the PRD's MVP scope. Features and optimizations not critical for launch will be deferred.\n*   **Leverage Managed Services:** Maximize the use of Supabase, Clerk, and Vercel to reduce infrastructure management and focus on core product features.\n*   **Stateless & Scalable Functions:** Core business logic, especially AI interactions, will be in serverless functions to ensure scalability and separation of concerns.\n\n### 1.3. Key Technical Goals (MVP)\n*   **AI Curriculum Generation:** Generate and stream a structured curriculum from a user prompt in under 30 seconds.\n*   **Performance:** Achieve a First Contentful Paint (FCP) of under 2.5 seconds on key pages.\n*   **Reliability:** The system must reliably support the initial target of 300 Daily Active Users (DAU).\n\n## 2. Technology Stack\n\n| Category | Technology | Rationale for MVP |\n|---|---|---|\n| **Framework** | Next.js (App Router) | Fast user experience (SSR), simplified data fetching, and strong ecosystem. |\n| **Backend** | Supabase | All-in-one BaaS (Postgres DB, Auth, Realtime, Edge Functions) for rapid development. |\n| **Authentication** | Clerk | Simplifies user management, social logins, and JWT handling with Next.js. |\n| **UI Components** | shadcn/ui + Tailwind CSS | Provides accessible, composable components for building the UI quickly. |\n| **Data Fetching** | TanStack Query (React Query) | Manages server state, caching, and automatic refetching to improve UX. |\n| **AI Integration** | OpenAI GPT-4 API | Provides the core intelligence for curriculum generation. |\n| **Deployment** | Vercel | Native integration with Next.js for seamless CI/CD and hosting. |\n\n*Note: Payment processing (LemonSqueezy) is deferred post-MVP as it is not a core MVP requirement.*\n\n## 3. System Architecture\n\n### 3.1. Component Diagram\nThe architecture is straightforward, centered around the Next.js frontend and Supabase backend.\n\n```mermaid\ngraph TD\n    subgraph User Device\n        A[Browser - Next.js App]\n    end\n\n    subgraph Vercel\n        B[Next.js Frontend/Server]\n        C[Edge Functions]\n    end\n\n    subgraph Third-Party Services\n        D[Supabase BaaS]\n        E[Clerk Auth]\n        F[OpenAI API]\n    end\n\n    A --> B\n    B -- Renders Pages & Fetches Data --> D\n    B -- Authenticates via --> E\n    B -- Invokes --> C\n    C -- Calls --> F\n    C -- Writes Results to --> D\n    D -- Realtime Updates --> A\n```\n\n### 3.2. Key Workflows\n\n1.  **AI Curriculum Generation:**\n    *   User submits a topic (e.g., \"Next.js Frontend\") in the Next.js client.\n    *   A Server Action or API Route invokes a Supabase Edge Function, passing the prompt.\n    *   The Edge Function securely calls the OpenAI API.\n    *   The function parses the AI response into a structured JSON format and saves it to the `curriculums` table in Supabase.\n    *   The client is notified of completion and fetches the new curriculum.\n\n2.  **Progress Tracking & Visualization:**\n    *   User checks off a task in the \"Classroom\" UI.\n    *   The client updates the `user_progress` table in Supabase.\n    *   Supabase's Realtime feature immediately pushes the change to the client.\n    *   The \"Jandi Graph\" (contribution graph) component re-fetches progress data to reflect the update.\n\n## 4. Database Schema (High-Level)\n\nThe schema will be kept simple and flexible, using JSONB for unstructured or evolving data.\n\n*   `users`\n    *   Provided by Supabase Auth and Clerk. We will reference the `auth.users.id`.\n\n*   `curriculums`\n    *   `id` (uuid, pk)\n    *   `user_id` (uuid, fk to auth.users) - The curriculum creator.\n    *   `forked_from_id` (uuid, fk to curriculums.id, nullable) - Tracks origin for forks.\n    *   `title` (text)\n    *   `domain` (text) - e.g., 'Frontend', 'Backend'.\n    *   `content` (jsonb) - The structured curriculum (sections, topics, links, etc.).\n\n*   `user_progress`\n    *   `user_id` (uuid, pk, fk to auth.users)\n    *   `curriculum_id` (uuid, pk, fk to curriculums.id)\n    *   `completed_steps` (jsonb) - A list or object tracking completed topic IDs.\n    *   `updated_at` (timestamp) - Used for the Jandi Graph.\n\n*   `reviews`\n    *   `id` (uuid, pk)\n    *   `curriculum_id` (uuid, fk to curriculums.id)\n    *   `user_id` (uuid, fk to auth.users)\n    *   `rating` (smallint) - 1 to 5.\n    *   `comment` (text, nullable)\n\n## 5. MVP Implementation Plan\n\nThis plan aligns directly with the 12-week MVP timeline from the PRD.\n\n| Weeks | Milestone | Key Technical Deliverables |\n|---|---|---|\n| **1-5** | **Core Foundation & AI PoC** | • Setup Next.js app, Supabase project, and Clerk integration.<br>• Implement user login/signup flow.<br>• Define and migrate initial DB schema.<br>• Build the Edge Function for AI curriculum generation (MVP version). |\n| **6-8** | **Learning Experience** | • Develop the \"Classroom\" UI to render curriculum `content`.<br>• Implement progress tracking logic (checkboxes updating `user_progress`).<br>• Basic 진도율 (progress percentage) display. |\n| **9-12** | **Community Features & Launch** | • Implement the \"Jandi Graph\" using `user_progress` data.<br>• Develop curriculum forking (row duplication) and editing (`content` update).<br>• Build the community review and rating system (β).<br>• Final QA, testing, and beta launch on Vercel. |\n\n## 6. Risks & Mitigation\n\n| Risk | Mitigation Strategy |\n|---|---|\n| **AI Content Quality is Poor** | **Primary:** Use GPT-4 for the highest quality. Implement robust prompting.<br>**Secondary:** Programmatically hide any curriculum with an average community rating below 3.5. |\n| **Scalability & Performance** | **Primary:** Supabase's standard tier is sufficient for the target DAU. We will use server-side rendering (SSR) and caching where appropriate.<br>**Secondary:** Identify and optimize slow queries as they arise. Defer any migration to a more complex architecture until user numbers justify it (>20k DAU). |\n| **External Service Downtime** (OpenAI, Clerk) | **Primary:** Implement reasonable timeouts and display clear, user-friendly error messages.<br>**Secondary:** For AI generation, cache results for popular topics to reduce API dependency and improve speed. |\n| **High OpenAI API Costs** | **Primary:** Enforce strict limits on curriculum generations per user per day.<br>**Secondary:** Monitor costs closely during beta and optimize prompts for token efficiency. |",
      "writedAt": "2025-09-12T18:55:38.692Z"
    },
    {
      "type": "guideline",
      "content": "\n  \n  ## Library\n  - **Packages**: `@myapp/api`, `@myapp/ui`, `@myapp/prisma`, `@myapp/utils`\n  - **Boundaries**: `apps/* -> packages/*` only; no cross-app imports; no cycles\n  - **Imports**: Package entrypoints only (no deep internal paths)\n  - **Env**: Server-only secrets on server; never expose in client\n  \n  ## Directory Structure\n  - **Monorepo**: `apps/app`, `apps/www`, `packages/*`, `tooling/*`\n  - **App (dashboard)**: `apps/app/src/{app,components,features,hooks,i18n,utils}`\n  - **Landing**: `apps/www/app`, `apps/www/src/{components,i18n}`\n  - **API**: `packages/api/src/{trpc.ts,root.ts,routers/*}`\n  - **DB**: `packages/prisma/prisma/*`, `packages/prisma/generated/prisma`\n  - **UI**: `packages/ui/src/{components,lib/utils.ts,index.ts}`\n  \n  ## Code Guidelines\n  - **Feature-first**: `apps/app/src/features/[feature]/*` (UI + logic)\n  - **Validation**: `zod` at API boundaries; reuse on client\n  - **tRPC**: Router per domain; export via `root.ts`; typed client in app\n  - **i18n**: `apps/app/messages`, `apps/www/src/i18n/locales`\n  - **Side-effects**: Server-only in API/tRPC; wrap external calls\n  \n  ## Code-Style Guidelines\n  - **TypeScript**: strict; prefer `type`; use `unknown` over `any`\n  - **Naming**: PascalCase components; camelCase vars; kebab-case dirs\n  - **Files**: One component per file; colocate tests/stories if any\n  - **Imports**: node/3p -> packages -> relative; no deep UI imports\n  - **React**: Server Components by default; `use client` only when needed; avoid default exports\n  - **Styling**: Tailwind; compose with `cn` from `@myapp/ui/lib/utils`\n  - **Format/Lint**: Prettier + ESLint from `tooling/eslint-config`\n  \n  ## Error Handling\n  - **Validate early**: `zod` parse → typed inputs\n  - **tRPC**: `TRPCError({ code, message, cause })`; map domain errors\n  - **HTTP**: `NextResponse.json({ error: { code, message } }, { status })`\n  - **UI feedback**: toasts/dialogs from `@myapp/ui`\n  - **Logging**: include context; never leak secrets\n  - **Never**: swallow errors or throw plain strings\n  \n  ## Prisma\n  - **Single source**: `packages/prisma/prisma/schema.prisma`\n  - **Flow**: edit → `pnpm db:migrate:create` → `pnpm db:generate`\n  - **Do NOT**: run `pnpm db:migrate:deploy` locally\n  - **Access**: use generated client (`@myapp/prisma`); no raw SQL\n  - **Transactions**: `prisma.$transaction`; handle unique/constraint errors\n  - **Types**: share DTOs via `zod` and `@myapp/utils`\n  \n  ## Shadcn (UI)\n  - **Source**: `packages/ui` only; import via package entrypoints\n  - **Add**: in `packages/ui` → `pnpm dlx shadcn@canary add <component>`\n  - **Export**: re-export from `packages/ui/src/index.ts`\n  - **Utilities**: `cn` from `@myapp/ui/lib/utils`\n  - **Styling**: follow tokens; avoid inline styles; no deep imports\n    ",
      "writedAt": "2025-09-12T18:55:38.692Z"
    },
    {
      "type": "design-guide",
      "content": "# LearnHub Design Guide\n\n## 1. 전체적인 무드\n\nLearnHub는 **혁신적이고 미래지향적인 AI 학습 플랫폼**으로, 사용자에게 신뢰감과 전문성을 동시에 전달하는 디자인 무드를 추구합니다. \n\n**핵심 컨셉**: \n- **Cool & Modern**: 차가운 색조와 현대적 인터페이스로 기술적 신뢰성 표현\n- **Gradient Accent**: 미래지향적 그라데이션으로 AI의 혁신성 강조\n- **Dark Theme**: 개발자 친화적 환경과 집중력 향상\n- **Minimal & Clean**: 복잡한 학습 정보를 깔끔하게 정리하여 인지 부하 최소화\n\n이 무드는 취준생과 개발자들이 선호하는 GitHub, VS Code와 같은 개발 도구의 친숙함을 활용하면서도, AI의 혁신성을 시각적으로 표현합니다.\n\n## 2. 참조 서비스\n\n- **Name**: Linear\n- **Description**: 현대적이고 효율적인 이슈 트래킹 및 프로젝트 관리 도구\n- **Design Mood**: 미니멀하고 다크한 인터페이스에 인디고 포인트 컬러로 세련된 전문성 표현\n- **Primary Color**: #5A67D8 (Indigo)\n- **Secondary Color**: #1A202C (Dark Gray)\n\nLinear의 깔끔한 다크 테마와 인디고 액센트는 개발자들에게 친숙하면서도 전문적인 느낌을 주어, LearnHub의 타겟 사용자에게 적합한 레퍼런스입니다.\n\n## 3. 색상 & 그라데이션\n\n### 주요 색상 팔레트\n- **Primary Color**: #5A4BFF (Electric Indigo) - AI의 혁신성과 신뢰성\n- **Secondary Color**: #14E7D5 (Neon Aqua) - 학습 진행과 성취감\n- **Accent Gradient**: #FF5CEA → #FF2AA9 (Magenta Gradient) - 특별한 순간과 성취\n- **Background**: #0F0F20 (Deep Charcoal) - 집중력과 전문성\n- **Text**: #E8EAF1 (Light Gray) - 가독성과 편안함\n\n### 무드\n- **Cool Tone**: 차가운 색조로 기술적 신뢰성 표현\n- **Medium-High Saturation**: 적절한 채도로 활력과 집중력 균형\n\n### 색상 사용 우선순위\n1. **Primary (Electric Indigo)**: CTA 버튼, 링크, 진행률 바, 네비게이션 활성 상태\n2. **Secondary (Neon Aqua)**: 성공 상태, 완료 표시, 알림 배지\n3. **Accent Gradient**: 특별 이벤트, 달성 배지, 프리미엄 기능 하이라이트\n4. **Background**: 전체 배경, 카드 배경, 모달 오버레이\n5. **Text**: 본문, 라벨, 설명 텍스트\n\n## 4. 타이포그래피 & 폰트\n\n### 폰트 시스템\n- **Font Family**: Inter (시스템 폰트 대체: -apple-system, BlinkMacSystemFont, sans-serif)\n- **Base Size**: 16px\n- **Line Height**: 1.5 (24px)\n\n### 타이포그래피 계층\n- **Heading 1**: Inter, 32px, Bold (700) - 페이지 제목\n- **Heading 2**: Inter, 24px, SemiBold (600) - 섹션 제목, 인디고 언더라인\n- **Heading 3**: Inter, 20px, Medium (500) - 카드 제목\n- **Body**: Inter, 16px, Regular (400) - 본문 텍스트\n- **Caption**: Inter, 14px, Regular (400) - 설명, 메타 정보\n- **Small**: Inter, 12px, Medium (500) - 라벨, 태그\n\n### 특별 스타일\n- **Heading 강조**: 인디고 컬러 (#5A4BFF) 언더라인으로 브랜드 일관성 유지\n- **Code Text**: Menlo, Monaco, 'Courier New', monospace - 기술 관련 텍스트\n\n## 5. 레이아웃 & 구조\n\n### 그리드 시스템\n- **Container Max Width**: 1200px\n- **Grid Columns**: 12 columns\n- **Gutter**: 24px\n- **Margin**: 32px (Desktop), 16px (Mobile)\n\n### 레이아웃 원칙\n1. **사이드바 네비게이션**: 240px 고정폭, 모바일에서 아이콘만 표시\n2. **메인 콘텐츠**: 가변폭, 최대 960px\n3. **상단 헤더**: 64px 고정 높이, 글로벌 검색바 포함\n4. **카드 시스템**: 8px 라운드 코너, 미묘한 그림자\n\n### 반응형 브레이크포인트\n- **Desktop**: 1024px+\n- **Tablet**: 768px - 1023px\n- **Mobile**: 767px 이하\n\n### 공간 시스템\n- **XXS**: 4px\n- **XS**: 8px\n- **SM**: 12px\n- **MD**: 16px\n- **LG**: 24px\n- **XL**: 32px\n- **XXL**: 48px\n\n## 6. 비주얼 스타일\n\n### 아이콘 시스템\n- **Icon Set**: Lucide React (라인 스타일)\n- **Size**: 16px, 20px, 24px\n- **Style**: 얇은 라인, 일관된 스트로크\n- **Color**: 텍스트 컬러와 동일하거나 Primary 컬러\n\n### 이미지 & 일러스트\n- **Style**: 미니멀하고 기하학적 형태\n- **Color**: 브랜드 컬러 팔레트 사용\n- **Format**: SVG 우선, 고해상도 PNG/WebP\n\n### 그림자 & 깊이\n- **Card Shadow**: 0 1px 3px rgba(0, 0, 0, 0.1)\n- **Modal Shadow**: 0 10px 25px rgba(0, 0, 0, 0.2)\n- **Hover Elevation**: 0 4px 12px rgba(90, 75, 255, 0.15)\n\n### 라운드 코너\n- **Small**: 4px (버튼, 태그)\n- **Medium**: 8px (카드, 입력 필드)\n- **Large**: 12px (모달, 큰 컨테이너)\n\n## 7. UX 가이드\n\n### 타겟 사용자 대응 전략\n\n#### 전문가 사용자 (Expert)\n- **파워 기능 제공**: 버전 관리, 일괄 편집, 고급 필터링\n- **키보드 단축키**: Cmd/Ctrl+K (검색), ESC (모달 닫기)\n- **효율적 워크플로우**: 빠른 액션 메뉴, 컨텍스트 메뉴\n\n#### 초보자 사용자 (Beginner)\n- **온보딩 위저드**: 3단계 간단한 목표 설정\n- **툴팁 가이드**: 주요 기능에 대한 친절한 설명\n- **기본 단순화 뷰**: 복잡한 옵션 숨김, 필수 기능만 노출\n\n### 핵심 UX 원칙\n1. **점진적 공개**: 사용자 숙련도에 따라 기능 단계적 노출\n2. **즉시 피드백**: 모든 액션에 대한 시각적 피드백 (로딩, 성공, 오류)\n3. **컨텍스트 보존**: 학습 진행 상황과 위치 항상 표시\n4. **동기부여 강화**: 진행률, 배지, 성취 시각화\n\n### 접근성 가이드라인\n- **색상 대비**: WCAG AA 기준 (4.5:1) 준수\n- **포커스 상태**: 인디고 링 (#5A4BFF) 표시\n- **키보드 네비게이션**: 모든 인터랙티브 요소 접근 가능\n- **스크린 리더**: 적절한 ARIA 라벨 및 역할 정의\n\n## 8. UI 컴포넌트 가이드\n\n### 버튼 (Button)\n```\nPrimary Button:\n- Background: #5A4BFF\n- Text: #FFFFFF\n- Padding: 12px 24px\n- Border Radius: 8px\n- Hover: #4C3FE0\n\nSecondary Button:\n- Background: transparent\n- Border: 1px solid #5A4BFF\n- Text: #5A4BFF\n- Padding: 12px 24px\n```\n\n### 입력 필드 (Input Field)\n```\nDefault State:\n- Background: #1A1B2E\n- Border: 1px solid #2D2E4A\n- Text: #E8EAF1\n- Padding: 12px 16px\n- Border Radius: 8px\n\nFocus State:\n- Border: 2px solid #5A4BFF\n- Box Shadow: 0 0 0 3px rgba(90, 75, 255, 0.1)\n```\n\n### 카드 (Card)\n```\nStyle:\n- Background: #1A1B2E\n- Border: 1px solid #2D2E4A\n- Border Radius: 12px\n- Padding: 24px\n- Shadow: 0 1px 3px rgba(0, 0, 0, 0.1)\n\nHover State:\n- Transform: translateY(-2px)\n- Shadow: 0 4px 12px rgba(90, 75, 255, 0.15)\n```\n\n### 네비게이션 바 (Navigation)\n```\nSidebar:\n- Width: 240px (Desktop), 64px (Mobile - 아이콘만)\n- Background: #0F0F20\n- Active Item: #5A4BFF background, #FFFFFF text\n\nTop Header:\n- Height: 64px\n- Background: #1A1B2E\n- Border Bottom: 1px solid #2D2E4A\n```\n\n### 진행률 바 (Progress Bar)\n```\nContainer:\n- Height: 8px\n- Background: #2D2E4A\n- Border Radius: 4px\n\nFill:\n- Background: linear-gradient(90deg, #5A4BFF, #14E7D5)\n- Border Radius: 4px\n- Transition: width 0.3s ease-out\n```\n\n### 알림 배지 (Notification Badge)\n```\nStyle:\n- Background: #14E7D5\n- Color: #0F0F20\n- Size: 20px × 20px\n- Border Radius: 50%\n- Font Size: 12px\n- Font Weight: 600\n```\n\n### 모달 (Modal)\n```\nOverlay:\n- Background: rgba(15, 15, 32, 0.8)\n- Backdrop Filter: blur(4px)\n\nContent:\n- Background: #1A1B2E\n- Border Radius: 12px\n- Max Width: 600px\n- Padding: 32px\n- Shadow: 0 10px 25px rgba(0, 0, 0, 0.2)\n```\n\n### 애니메이션 가이드\n- **Duration**: 200ms (기본), 300ms (복잡한 전환)\n- **Easing**: ease-out (자연스러운 감속)\n- **Hover Effects**: transform, box-shadow 변화\n- **Loading States**: 스켈레톤 UI 또는 스피너 사용",
      "writedAt": "2025-09-12T18:55:38.692Z"
    },
    {
      "type": "ia",
      "content": "# LearnHub Information Architecture (IA)\n\n## 1. 사이트맵\n\n```\nLearnHub 플랫폼\n├── 홈 (/)\n├── 인증 (/auth)\n│   ├── 로그인 (/auth/login)\n│   ├── 회원가입 (/auth/signup)\n│   └── 비밀번호 재설정 (/auth/reset-password)\n├── 대시보드 (/dashboard) [인증 필요]\n│   ├── 학습 현황 (/dashboard/overview)\n│   ├── 진행률 분석 (/dashboard/analytics)\n│   └── 성취 배지 (/dashboard/achievements)\n├── 커리큘럼 라이브러리 (/curriculum) [인증 필요]\n│   ├── 전체 목록 (/curriculum/browse)\n│   ├── 내 커리큘럼 (/curriculum/my)\n│   ├── 새 커리큘럼 생성 (/curriculum/create)\n│   ├── 커리큘럼 상세 (/curriculum/:id)\n│   ├── 커리큘럼 편집 (/curriculum/:id/edit)\n│   └── 포크된 커리큘럼 (/curriculum/:id/fork)\n├── 학습실 (/learning) [인증 필요]\n│   ├── 강의실 메인 (/learning/room/:curriculumId)\n│   ├── 학습 콘텐츠 뷰어 (/learning/content/:contentId)\n│   ├── 진도 체크 (/learning/progress/:curriculumId)\n│   └── 학습 노트 (/learning/notes/:curriculumId)\n├── 커뮤니티 (/community) [인증 필요]\n│   ├── 커리큘럼 탐색 (/community/explore)\n│   ├── 리뷰 및 평가 (/community/reviews)\n│   ├── 리더보드 (/community/leaderboard)\n│   └── 토론 게시판 (/community/discussions)\n├── 알림 (/notifications) [인증 필요]\n├── 설정 (/settings) [인증 필요]\n│   ├── 프로필 설정 (/settings/profile)\n│   ├── 구독 관리 (/settings/subscription)\n│   ├── 알림 설정 (/settings/notifications)\n│   └── 연동 설정 (/settings/integrations)\n└── 도움말 (/help)\n    ├── FAQ (/help/faq)\n    ├── 사용 가이드 (/help/guide)\n    └── 문의하기 (/help/contact)\n```\n\n## 2. 사용자 흐름 (사용자 흐름)\n\n### 핵심 작업 1: 사용자 온보딩 및 첫 커리큘럼 생성\n1. 사용자가 홈페이지(/) 방문\n2. '시작하기' 버튼 클릭\n3. 회원가입 페이지(/auth/signup)로 이동\n4. 구글 계정 1-클릭 가입 완료\n5. 온보딩 모달에서 학습 목표 입력 (\"Next.js 프론트엔드 취업\")\n6. AI가 커리큘럼 자동 생성 (30초 대기)\n7. 대시보드(/dashboard)로 리다이렉트\n8. 생성된 커리큘럼 확인 후 '학습 시작' 클릭\n9. 학습실(/learning/room/:curriculumId)로 이동\n\n### 핵심 작업 2: 일일 학습 진행\n1. 대시보드(/dashboard)에서 진행 중인 커리큘럼 확인\n2. '오늘의 학습' 카드 클릭\n3. 학습실(/learning/room/:curriculumId) 진입\n4. 주차별 강의 목록에서 다음 강의 선택\n5. 학습 콘텐츠 뷰어(/learning/content/:contentId)에서 강의 시청\n6. 학습 완료 후 '완료' 버튼 클릭\n7. 진도율 업데이트 및 잔디 그래프 반영\n8. 다음 강의로 자동 이동 또는 학습실로 복귀\n\n### 핵심 작업 3: 커리큘럼 포크 및 커스터마이징\n1. 커뮤니티(/community/explore)에서 인기 커리큘럼 탐색\n2. 관심 있는 커리큘럼 상세 페이지(/curriculum/:id) 방문\n3. '포크하기' 버튼 클릭\n4. 포크된 커리큘럼(/curriculum/:id/fork) 생성\n5. '편집하기' 버튼으로 편집 모드(/curriculum/:id/edit) 진입\n6. 불필요한 강의 삭제 또는 새로운 자료 추가\n7. 변경사항 저장 후 내 커리큘럼(/curriculum/my)에서 확인\n8. 커스터마이징된 커리큘럼으로 학습 시작\n\n## 3. 네비게이션 구조\n\n### 글로벌 네비게이션 바 (GNB) - 상단 헤더\n- **로고 영역**: LearnHub 브랜드 로고 (홈으로 이동)\n- **글로벌 검색바**: 커리큘럼 통합 검색 기능\n- **사용자 메뉴**: 프로필 이미지, 알림 아이콘, 설정 드롭다운\n\n### 사이드바 네비게이션 (LNB) - 좌측 고정\n- **대시보드**: 학습 현황 및 분석\n- **커리큘럼 라이브러리**: 커리큘럼 관리 및 생성\n- **학습실**: 현재 진행 중인 학습\n- **커뮤니티**: 탐색, 리뷰, 토론\n- **알림**: 학습 리마인더 및 업데이트\n- **설정**: 계정 및 환경 설정\n\n### 푸터 네비게이션\n- **회사 정보**: 소개, 팀, 채용\n- **지원**: FAQ, 가이드, 문의\n- **정책**: 이용약관, 개인정보처리방침\n- **소셜 미디어**: Twitter, LinkedIn 링크\n\n## 4. 페이지 계층 구조\n\n```\n/ (깊이 1)\n├── /auth (깊이 1)\n│   ├── /auth/login (깊이 2)\n│   ├── /auth/signup (깊이 2)\n│   └── /auth/reset-password (깊이 2)\n├── /dashboard (깊이 1)\n│   ├── /dashboard/overview (깊이 2)\n│   ├── /dashboard/analytics (깊이 2)\n│   └── /dashboard/achievements (깊이 2)\n├── /curriculum (깊이 1)\n│   ├── /curriculum/browse (깊이 2)\n│   ├── /curriculum/my (깊이 2)\n│   ├── /curriculum/create (깊이 2)\n│   ├── /curriculum/:id (깊이 2)\n│   ├── /curriculum/:id/edit (깊이 3)\n│   └── /curriculum/:id/fork (깊이 3)\n├── /learning (깊이 1)\n│   ├── /learning/room/:curriculumId (깊이 2)\n│   ├── /learning/content/:contentId (깊이 2)\n│   ├── /learning/progress/:curriculumId (깊이 2)\n│   └── /learning/notes/:curriculumId (깊이 2)\n├── /community (깊이 1)\n│   ├── /community/explore (깊이 2)\n│   ├── /community/reviews (깊이 2)\n│   ├── /community/leaderboard (깊이 2)\n│   └── /community/discussions (깊이 2)\n├── /notifications (깊이 1)\n├── /settings (깊이 1)\n│   ├── /settings/profile (깊이 2)\n│   ├── /settings/subscription (깊이 2)\n│   ├── /settings/notifications (깊이 2)\n│   └── /settings/integrations (깊이 2)\n└── /help (깊이 1)\n    ├── /help/faq (깊이 2)\n    ├── /help/guide (깊이 2)\n    └── /help/contact (깊이 2)\n```\n\n## 5. 콘텐츠 구성\n\n| 페이지 | 핵심 콘텐츠 요소 |\n|--------|------------------|\n| 홈 (/) | 히어로 섹션, AI 커리큘럼 생성 데모, 주요 기능 소개, CTA 버튼, 사용자 후기 |\n| 대시보드 (/dashboard) | 학습 진행률 차트, 잔디 그래프, 오늘의 학습 카드, 성취 배지, 추천 커리큘럼 |\n| 커리큘럼 라이브러리 (/curriculum/browse) | 커리큘럼 카드 그리드, 필터 사이드바, 검색바, 정렬 옵션, 페이지네이션 |\n| 커리큘럼 생성 (/curriculum/create) | 목표 입력 폼, AI 생성 옵션, 템플릿 선택, 미리보기 영역, 생성 버튼 |\n| 커리큘럼 상세 (/curriculum/:id) | 커리큘럼 개요, 주차별 강의 목록, 리뷰 섹션, 통계 정보, 포크/시작 버튼 |\n| 학습실 (/learning/room/:curriculumId) | 진도율 헤더, 주차별 탭, 강의 체크리스트, 노트 영역, 다음 강의 버튼 |\n| 학습 콘텐츠 뷰어 (/learning/content/:contentId) | 비디오/텍스트 플레이어, 진도 슬라이더, 노트 패널, 완료 버튼, 네비게이션 |\n| 커뮤니티 탐색 (/community/explore) | 인기 커리큘럼 그리드, 카테고리 필터, 평점 정렬, 사용자 리뷰 미리보기 |\n| 내 프로필 (/settings/profile) | 프로필 이미지, 개인정보 폼, 학습 목표 설정, 소셜 연동 옵션, 저장 버튼 |\n\n## 6. 인터랙션 패턴\n\n### 모달 사용 패턴\n- **확인 모달**: 커리큘럼 삭제, 학습 초기화 등 중요한 액션\n- **생성 모달**: 빠른 커리큘럼 생성, 노트 추가\n- **미리보기 모달**: 커리큘럼 상세 정보 빠른 확인\n\n### 툴팁 사용 패턴\n- **도움말 툴팁**: 복잡한 기능에 대한 간단한 설명\n- **상태 툴팁**: 진행률, 배지 획득 조건 안내\n- **단축키 툴팁**: 키보드 단축키 힌트\n\n### 무한 스크롤 패턴\n- **커리큘럼 목록**: 스크롤 시 추가 커리큘럼 자동 로드\n- **커뮤니티 피드**: 리뷰 및 토론 글 무한 스크롤\n- **알림 목록**: 과거 알림 기록 점진적 로드\n\n### 드래그 앤 드롭 패턴\n- **커리큘럼 편집**: 강의 순서 변경\n- **대시보드 위젯**: 차트 및 카드 배치 커스터마이징\n\n### 실시간 업데이트 패턴\n- **진도율 바**: 학습 완료 시 즉시 애니메이션 업데이트\n- **잔디 그래프**: 일일 학습 완료 시 실시간 반영\n- **알림 배지**: 새로운 알림 수신 시 즉시 표시\n\n## 7. URL 구조\n\n### 일반 원칙\n- **리소스 기반**: `/resource-name`\n- **상세 페이지**: `/resource-name/:id`\n- **하위 액션**: `/resource-name/:id/action`\n- **사용자 소유**: `/resource-name/my`\n\n### 구체적 URL 규칙\n```\n홈페이지: /\n인증: /auth/login, /auth/signup, /auth/reset-password\n대시보드: /dashboard, /dashboard/analytics, /dashboard/achievements\n커리큘럼: /curriculum/browse, /curriculum/my, /curriculum/create\n커리큘럼 상세: /curriculum/:id, /curriculum/:id/edit, /curriculum/:id/fork\n학습: /learning/room/:curriculumId, /learning/content/:contentId\n커뮤니티: /community/explore, /community/reviews, /community/leaderboard\n설정: /settings/profile, /settings/subscription, /settings/notifications\n도움말: /help/faq, /help/guide, /help/contact\n```\n\n### SEO 최적화 고려사항\n- **의미있는 URL**: 커리큘럼 제목을 포함한 슬러그 사용 가능\n- **다국어 지원**: 향후 `/ko/`, `/en/` 접두사 확장 가능\n- **정적 페이지**: 도움말, FAQ는 정적 생성으로 SEO 최적화\n\n## 8. 컴포넌트 계층 구조\n\n### 글로벌 컴포넌트\n- **Header**: 로고, 검색바, 사용자 메뉴\n- **Sidebar**: 메인 네비게이션, 현재 페이지 표시\n- **Footer**: 회사 정보, 링크, 소셜 미디어\n- **Modal**: 범용 모달 컨테이너\n- **Toast**: 알림 메시지 표시\n- **LoadingSpinner**: 로딩 상태 표시\n\n### 대시보드 컴포넌트\n- **ProgressChart**: 학습 진행률 시각화\n- **GrassChart**: GitHub 스타일 잔디 그래프\n- **AchievementBadge**: 성취 배지 표시\n- **TodayLearningCard**: 오늘의 학습 추천\n- **QuickStatsCard**: 주요 통계 요약\n\n### 커리큘럼 컴포넌트\n- **CurriculumCard**: 커리큘럼 미리보기 카드\n- **CurriculumDetail**: 상세 정보 표시\n- **WeeklySchedule**: 주차별 학습 계획\n- **LectureCheckbox**: 강의 완료 체크\n- **ProgressBar**: 진도율 바\n- **ReviewSection**: 리뷰 및 평점\n\n### 학습실 컴포넌트\n- **LearningRoom**: 학습실 메인 컨테이너\n- **ContentViewer**: 비디오/텍스트 콘텐츠 플레이어\n- **NoteEditor**: 학습 노트 작성 도구\n- **NavigationPanel**: 강의 목록 네비게이션\n- **CompletionButton**: 학습 완료 버튼\n\n### 커뮤니티 컴포넌트\n- **CurriculumGrid**: 커리큘럼 그리드 레이아웃\n- **ReviewCard**: 사용자 리뷰 카드\n- **LeaderboardTable**: 순위표\n- **FilterSidebar**: 필터링 사이드바\n- **UserProfile**: 사용자 프로필 미니 카드\n\n### 폼 컴포넌트\n- **Input**: 기본 입력 필드\n- **TextArea**: 다줄 텍스트 입력\n- **Select**: 드롭다운 선택\n- **Checkbox**: 체크박스\n- **Button**: 다양한 스타일의 버튼\n- **FormGroup**: 폼 필드 그룹핑\n\n### 데이터 표시 컴포넌트\n- **Table**: 데이터 테이블\n- **Card**: 기본 카드 컨테이너\n- **Tag**: 태그/라벨 표시\n- **Avatar**: 사용자 아바타\n- **Badge**: 알림 배지\n- **Tooltip**: 툴팁 표시\n\n이 컴포넌트 계층 구조는 재사용성과 일관성을 보장하며, 디자인 가이드의 시각적 스타일과 완벽하게 일치하도록 구성되었습니다.",
      "writedAt": "2025-09-12T18:55:38.692Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-09-12T18:55:38.692Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-09-12T18:55:38.692Z"
    }
  ]
}